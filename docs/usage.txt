
=====
Usage
=====

django-scheduled-mailer is asynchronous so in addition to putting mail on the queue you
need to periodically tell it to clear the queue and actually send the mail.

The latter is done via a command extension.

Putting Mail On The Queue
=========================

Because django-scheduled-mailer currently uses the same function signature as Django's
core mail support you can do the following in your code::

    # favour django-scheduled-mailer but fall back to django.core.mail
    from django.conf import settings

    if "scheduled_mailer" in settings.INSTALLED_APPS:
        from scheduled_mailer import send_mail
    else:
        from django.core.mail import send_mail

and then just call send_mail like you normally would in Django::

    send_mail(subject, message_body, settings.DEFAULT_FROM_EMAIL, recipients)

or to send a HTML e-mail (this function is **not** in Django)::

    send_html_mail(subject, message_plaintext, message_html, settings.DEFAULT_FROM_EMAIL, recipients)

Additionally you can send all the admins as specified in the ``ADMIN``
setting by calling::

    mail_admins(subject, message_body)

or all managers as defined in the ``MANAGERS`` setting by calling::

    mail_managers(subject, message_body)

Clear Queue With Command Extensions
===================================

With scheduled_mailer in your INSTALLED_APPS, there will be two new manage.py commands
you can run:

 * ``send_mail`` will clear the current message queue. If there are any
   failures, they will be marked deferred and will not be attempted again by
   ``send_mail``.

 * ``retry_deferred`` will move any deferred mail back into the normal queue
   (so it will be attempted again on the next ``send_mail``).

You may want to set these up via cron to run regularly::

    * * * * * (cd $PROJECT; ./manage.py send_mail >> $PROJECT/cron_mail.log 2>&1)
    */20 * * * * (cd $PROJECT; ./manage.py retry_deferred >> $PROJECT/cron_mail_deferred.log 2>&1)

This attempts to send mail every minute with a retry on failure every 20 minutes.

``manage.py send_mail`` uses a lock file in case clearing the queue takes
longer than the interval between calling ``manage.py send_mail``.

Note that if your project lives inside a virtualenv, you also have to execute
this command from the virtualenv. The same, naturally, applies also if you're
executing it with cron.

Using EMAIL_BACKEND
===================

To automatically switch all your mail to use django-scheduled-mailer, instead of changing imports
you can also use the EMAIL_BACKEND feature that was introduced in Django 1.2. In
your settings file, you first have to set EMAIL_BACKEND::

    EMAIL_BACKEND = "scheduled_mailer.backend.DbBackend"

If you were previously using a non-default EMAIL_BACKEND, you need to configure
the MAILER_EMAIL_BACKEND setting, so that django-scheduled-mailer knows how to actually send
the mail::

    MAILER_EMAIL_BACKEND = "your.actual.EmailBackend"
